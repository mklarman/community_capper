1 - start a project with postgres: rails new Project_name --database=postgresql

2 - open project (subl .) and add gem 'devise' to the Gemfile and run bundle install in the terminal

3 - run rails generate devise:install in the terminal.  Insert config.action_mailer.default_url_options = { host: 'localhost', port: 3000 } into the routes/environments/development folder.  Then go to routes rb and copy the override functions from another project.

4 - create your devise model and controllers: rails g devise:controllers users and rails g devise User for the model.

5 - create the postgres DB in the command line: rake db:create

6 - fill in the migration table for users

7 - rake db:migrate in the terminal

8 - rails s in the console starts the server and will open up the login page.


4/17/19 - Pages For CC

Home Page - sessions new

This page will have a banner of some sort, a nav bar, an explanation of what the site aims to do for sports bettors.  Maybe a flow chart with little text.

On the NAV BAR: Home, My Profile, Enter Picks, Matchup Analytics

Models:  User, Matchup, Selection, elements needed for social platform.

If I write a function that can score user selections on the fly then they do not need to be graded.  User will not have to hit a button to score their picks.  The selection must hold the matchup id.  This way I can do double headers.  Use Home/Away attributes as identifiers.

For User records: call the function and pass the User object through it, have it spit out the user record.  Have functions for all the splits.  Record in a sport, last ten, in point spread ranges, on certain teams, in division games, conf games, out of conf games, when they pick the road team or home team.  They will have all these percentages in their personal profile, but maybe in their public profiles to others show their three best and their three worst.

Have a message board and a pm system maybe.  Promote conversation between people at sports books across the country.

Have sports bettors follow one another.  Can search for the profiles of others.  When there click a button which creates a new model(Fan?) where the one being followed is the Star and the one following is the Fan.  When Star makes picks, those picks appear on the fan's feed.

A message board that allows people to make things public like the buzz from one sports book to another or the biggest line moving games and maybe a chat room.

Create our own network that connects sports bettors.  Have an idea on what I need.  Should be able to put the logic together rather quickly the design and the mobile design specifically will take the longest.  I have to picture these web pages and see how it is best to display information on the cell phone.

Stat heavy pages: User Profile, matchup analytics.

Create a platform where handicappers can follow each other.  Probably needs to be a follow button for each category.  Handicappers can follow specific situations of other handicappers.  The selections of the handicappers you follow will appear on your feed in your profile.

You can't see your percentages, but you can see everybody elses and they can see yours.

How would the follow/fade work?  We'll need a migration with a Model called Tag.  Tag will take the id of the current user(:follower), the id of the handicapper being tagged(:star), it will also take the situation(game situation), and it will take the brand(fade or follow).  Need to be two buttons Fade and Follow next to each category.  When they are in fade or follow mode need to give them a stop button so they can unfollow the situation.  Need to create the new model on the profile page of the star.  This way I can grab the :follower_id, :star_id, :situation, and :brand.

Toughest thing may be the design to make the process of follow/unfollow neat and clean.  This can be done.  Loop through tag models and in the models where the follower_id is the current_user then display appropriate picks for them.  If current_user is the star then count them and get the user names of the :follower and display it for them.  How many people following you and who they are.

If the current_user matches the url id then it will display one thing, but if they do not match then it will display another(the follow/unfollow process)

So, now the site will have a follow/unfollow process that will allow handicapers to set up their own private database of information and then in their profile I can display their information for them.  If any of their faders are in action then list it and list them by how many faders are on it, same for the followers.  And if their faders/followers are on the opposite sides then it is a key game for the handicapper.

I still think entering in your picks should unlock the platform.  It is so important for people to get their information in.  Have to get them to do it.  Have to motivate them.

Gonna have to explain the platform to people.  How it works.  Three major moving parts:  User Selections, Matchup analysis, Private Consensus, Private Message also.

Have to get that core 100 there entering picks so handicappers have someone to fade/follow.

Models:

User - has_many selections, has_many tags, has_many contacts

:admin
:username
:agent, set a default to me but recruit agents in sportsbooks.

Matchup - has many selections

:all the things I plan on collecting in a game matchup.

Selection - belongs to User, belongs to Matchup

:user_id
:matchup_id
:selection

Tag - belongs_to user



Contact - belongs to user

:sender_id - current_user.id
:username - name of recipient
:message - body of message 

You reach the homepage and the home page gives you an idea of what the site is - social platform that allows sports bettors to follow each other and build connections.  Handicappers will be able to fade or follow other handicappers in very specific game situations.  Handicappers can search through the profiles of other handicappers and choose to fade or follow any handicapper in an array of different situations.  That then populates your feed with the picks of these handicappers when they select a game in a situation you have faded/followed.  Your feed is then analyzed and organized for you and you are alerted to the strongest plays given the handicappers you are following.

So the fade follow process will involve grabbing the id of the star, the current user is the follower.

Need an index page that allows users to enter usernames, maybe have a directory of all names, let them look names up or let them just browse.  Have the stats of the first player on the screen and maybe an arrow that let them slides through from one profile to the next or a box where they can enter a username.

Have to see if I can grab both ids.

For the fade/follow need to build an index page with a grid.  Display the stats of the star and have the fade/follow buttons.

For the selections, they will need to click on the matchup and go to the matchup show page where I can grab all the data for selection: sport, date, matchup_id, current_user id, pick, spread.  On matchup edit is where we can do the complete analysis and consensus stuff.

The site will revolve around the selection/matchup process and also the fade/follow process.  Users will be able to build a feed with very unique information based on the selections of others, and then there is a global look at the entire community in regards to each matchup, plus have the average margin of victory stats(AMV) for a bunch of different game situations.

The feed analysis, the AMV stats, the global consensus.

Need to create a dummy project and set up the User, tag models and see if I can capture both ids and the game situation.  Once I can do that then need to figure out the process of making selections.



4/22/19  

In order to surf through profiles, make a directory with links.  You can click on them and be brought to that page.  Scratch that.  Create an index page where the user enters an id number into a box. This will be the id of the star.  We grab the stats of the star and display on the page along with the fade/follow buttons.  Now I have the star id and the follower id.  Have to list their stars on the index page so they can repunch in their id if they wish.

PAGES

Home - sessions new - I need to learn design.  I need to take some free CSS courses.  The front needs to hold our message and look professional.  I have to set out time for that.  List/explain the features of the site: Private Consensus Construction, AMV stats, Network Consensus.  Gonna have to learn how to do some things.  It can't look cartoonish.

Welcome About - about us.  The mission.  How the site works.  Learn how to add screenshots maybe.  This is the page that will instruct the user on how to use the site.

User Profile - Organize their private consensus.  Private Message information/function.  Give them some personal stats.  Controls to delete a tag/unfollow.  Show them how many followers they have and how many faders they have.  

Matchup Index - a page that will list all matchups that are yet to be played in each sport.  This code will have to take into account start times which I will have to control.

Matchup Show - this page will show matchup information and this will be the page where the user can make a pick on the game so the selection form will need to be on this page.

Matchup Edit - this will show the AMV stats and the global consensus stats for the game but this is the page where I will enter the scores as well under an admin if statement.

Welcome - users_list.  This will be where the current user can enter a number into a field and get returned the stats of the user whose id they have entered.  This is the page with the fade/follow logic.

1) Create the rest of the models and controllers

2) Test them to make sure you are saving information

3) Tackle the fade/follow logic first

If I capture the user id through js then how do I pass it to ruby?  I can create an IndexRequest model that takes in a request and the current_user.id.  Then we acces the last request and search for that user, find them and then run all the functions on that handicapper's selections and display the information.

What functions?

Sort winners and losers in their selections for each sport and overall.

Sort winners and losers for the various categories.  Point Spread Ranges, game times, weather.  Next to each record have the fade/follow options.  Pressing these options will create a new tag that will have the sport and the situation and the star id (grab this from last indexRequest) and the follower id.  Explore js options.  In the add event listener look up the user id within a Ruby loop and get the user that way then perform the functions.  Really don't wanna save IndexRequests.  I think it can be done in js and not save the requests.

Fade/Follow

Search Page - welcome/search

A js box where the user can input a number from 1 - user.length.  When they click submit and start a function that does...

1 - grabs the value of the number

2 - loop through all Users in ruby code.  Ask if the ruby id is == to the input value.  If it is then run the helper functions on that user object in ruby and popualate all the variables.

3 - display variables using a loop and add the fade/follow buttons and add event listeners.

I ran a quick test and I can run helper functions inside of a js if statement and I can populate the variables.

Picks will be made on matchup show - need the new selection form on this page and make the teams clickable.  That click sends that team into the selection form and maybe have an option for none.

Picks will use the Selection and the Matchup models.  I fill out the matchups.  Those matchups appear on the matchup/index.  The user clicks on the matchup and goes to the matchup show page where we display certain stats about the game but not all.  The user is able to make a selection on the game.  The selection will capture the matchup_id, the selection, the spread.

The AMV stats will also use the matchup.

The hardest part will be the fade/follow logic and how that plays into the private consensus/users_profile.

Need to create a tag and then go to the respective profiles of each user in the tag and see what comes up when I call the current_user tags.

To create the tags. Hide the tag form on the index page and see if you can embedd both the star_id and current_user id.  I think I can do this.

Do I want to put an active field in matchups so I can list the proper ones and not list the old ones.

4/26/19

I have the basic fade/follow logic completed.  Users will be able to fade or follower other handicappers now with a click of a button.  Now I have to lay out the stats on the page, and run my checks to make sure they do not select the same category twice.

5/2/19

Helper Functions Needed:

User_profile_helper

1) Find the people that the user follows(stars)
2) seperate the stars into fades and follows
3) Analysis for the fades - count the times teams chosen
4) analysis for the follows - count the times teams chosen.

Matchup_show

1) Teams AMV in spread situation
2) Teams AMV vs opponent
3) Teams AMV in location
4) Teams AMV in start time
5) Teams AMV in game_type
6) Teams AMV in field_type
7) Teams AMV vs team rankings

For baseball

1) Teams AMV vs pitcher; Teams AMV with pitcher on the mound.
2) Teams Record with pitcher on the mound
3) Teams AVG run let up when pitcher starts

5/8/19

Addition:

Set the site up so that statisticians can log what has happened after every play.  This would require to click on a matchup and go to a page where you can get the matchup id.  When there, there is a play by play form for the sport.  This form is associated with the Matchup.  Need a new controller, model to handle this: GameLog.

What sports can we log play by play?  MLB, NFL.  Does it make sense for the other sports?  Not right now.

What would the form look like?  Combined form that uses an if statement in the view so can customize for sport.

MLB:

Pitcher: Name
Batter: Name
Throws: Left/Right
Bats: Left/Right/Switch
Pitcher_team:
Batter_team:
Home: Batter/Pitcher
score: number
inning: number
outs: number
Bases: first and third, etc
pitch_count: number
pitches_in_at-bat: number
batter's_count:
Last_Pitch: Slider, curveball, etc
result: ball, swinging strike, taking strike, walk, strike out swinging, strike out looking, single, double, tripe, hr, hit by pitch, fielder's choice, reach on error.
runs_scored_on_play: number

NFL:

home:
away:
home_score:
away_score:
quarter:
play_type: run or pass
result: yards gained or lost, fumble, interception, sack, 
points:  

For College BBall and College FBall, have to track the small schools.  Create a model for them then create the schools, then for each school create the game tickets which are the stats for the game for the teams.  I then can do whatever I want mathematically with the info.  Could be a real edge.

For Coll football:

School:
team_name
sport:
conf:

GameTicket for Col football




For College basketball figure out how yards gained and points relate.  Add up how many yards each team has gained and divide by the total points they scored, do the same for their opponents.  Now for each team you have have the number of points they score per yard and the number of points they let up per yard.  Now I can mathematically make a prediction on the score by multiplying the ratio by the avg yards gained/given up.  Do it on the road and at home.

GameTicket for Col basketball

See what stats I can get.  A break down of how each team scores: from 3, from perimeter, in paint and also that exact breakdown for points they let up.



I think I need a teams controller and then I can make GameLogs for the teams and then I can conjure any stats I want.  For what sports?  NFL, Col Football, Col BBall, NBA, MLB.  I can benefit for all.  Plus the more I collect in the game logs the less I have to collect in the matchup.  The more I can show on the matchup page.

Tools on the site: Game Log algorithms(AMV stats and PPY/PPP stats), private and global consensus for NBA and NFL.

Game Log algorithms will use Team, GameLog, and Matchup.  Matchup will contain the names of the Team that's how I will find the GameLog which will contain the team ID.  On a matchup show page I can show what stats I want by searching through game logs for the teams in the matchup.  Matchup would only need Home Team, Away Team, Fav Team, Dog Team, spread, fav score, dog score, spread_wimner.

The private and global consensus will use the matchup, selection, and tag models.

MODELS

USER

:username
:agent
:statter
:admin

TEAM

:sport
:team_name
:city_or_school
:matchup_abbr

MATCHUP

:date
:sport
:home_team
:road_team
:fav_team
:dog_team
:spread
:fav_score
:dog_score
:spread_winner

SELECTION

:user_id
:matchup_id
:selection
:spread
:situation

TAG

:follower_id - current_user.id
:star_id - id of user being followed
:situation - game situation
:brand - fade or follow, depends on what button is selected



NBAGAMELOG

:team_id
:date
:team_name
:opp
:home - true/false
:spread
:situation
:team_possessions
:opp_possessions
:team_pts_in_paint
:opp_pts_in_paint
:team_pts_perim
:opp_pts_perim
:team_pts_from3
:opp_pts_from3
:team_rebounds
:opp_rebounds
:team_turn_over
:opp_turn_over
:team_score
:opp_score
:spread_result

NFLGAMELOG

:team_id
:date
:team_name
:home
:opp
:spread
:situation
:team_possessions
:opp_possessions
:first_downs_for
:first_downs_against
:rush_yards_for
:rush_yards_against
:pass_yards_for
:pass_yards_against
:team_turn_overs
:opp_turn_overs
:team_score
:opp_score
:spread_result

MLBGAMELOG

:team_id
:date
:team_name
:opp
:home
:spread
:situation
:team_starting_pitcher
:opp_starting_pitcher
:team_starter_pitches
:opp_starter_pitches
:team_bullpen_picthes
:opp_bullpen_picthes
:runs_by_opp_starter
:runs_by_team_starter
:runs_by_opp_bullpen
:runs_by_team_bullpen
:at_bats_for:
:at_bats_against:
:team_hits
:team_errors
:opp_hits
:opp_errors
:team_runs
:opp_runs
:spread_result

CBBGAMELOG

team_id:
date:
opp:
opp_conf:
home: true/false
opp_pts_off_3:
opp_pts_in-paint:
home_pts_off_3:
home_pts_in-paint:
:opp_qual_possessions
:team_qual_possessions
:opp_turn_overs
:team_turn_overs
opp_score:
home_score:
spread_result:

CFBGAMELOG

team_id:
date:
opp:
Home: true or false
opp_conf:
rush yards gained:
rush yards given up:
pass yards gained:
pass yards given up:
team_first_downs:
opp_first_downs:
team_turn_overs:
opp_turn_overs:
score:
opp_score:
spread_result:

Tomorrow I want to set up the platform to start collecting MLB game logs.  Look at some boxscores to see what you can collect on games.  Set up the heroku DB and start collecting so I have the info.

5/13/19

Set up the MLB portal and started entering games.  What kind of things are there to keep track of?

Pitches/runs thrown by the bullpen.  How many bullpen pitches does a team avg when starter xyz is on the mound.

How many at-bats does team xyz need to score 1 run?  How many at-bats do they avg vs opp starter?  How many hits do they need to score 1 run?

How many runs does the team give up per pitch when starter xyz is on the mound?  How many pitches are needed to complete a game when that starter is on the mound?

How many runs per pitch does their bullpen give up?  

How many pitches do they avg. per hit?

Run analytics on the starter, the bullpen, and the lineup.

Have to figure out how many at-bats a team avg per nine innings.  Then how many at-bats do they avg. per hit, then how many hits on avg to score a run.  How many pitches per at-bat?  On avg. how many pitches does the opp bullpen throw in games ve them.

Have to figure out how many pitches does it take to close a game for each team.  Then can figure out, given the starter, the expected number of pitches to be thrown by the bullpen in the game.


For College basketball and football:

Need to study the rosters of the teams to track.  Who is coming back, how many new players, starters, injuries, coaching tenure.  Have to know them.  Log the game stats for these teams and run an analysis for when they play each other.  Have the computer model make predictions on how many points the team will score.

Have to move on all predictions.  Volume.  Need ten to fifteen tickets each Saturday.  Hope to win 8 - 10 of them.


5/24/19

I have the rolling snapshot going for MLB, ranking teams in a doaen different categories.  Stats look good.  I'm happy with it.

Next step is to build out the matchup page.

Show team A off stats vs corresponding Team b's pitching stats.

Show team B off stats vs corresponding Team a's pitching stats.

A off vs B starter
B off vs A starter

A off vs B bullpen
B off vs A bullpen

5/26/19

A(home stats) vs B(road stats) snapshot - how both team stands overall for the year

A vs Starter and A vs Bullpen - B vs starter and B vs Bullpen

A's Last Ten Games stats - B's last ten game stats.


               PHILLIES(HOME) -145  METS(AWAY) +130

PHILLIES HOME OFF/METS ROAD PITCHING    METS ROAD OFF/PHILS HOME PITCHING

PHLS OFF              METS PITCHING
                               
Runs_For:             Runs_Against:        
At_Bats/9:            At_Bats_Against/9: 
At_Bats/Run:          At_Bats_Against/Run: 
Hits/9                Hits_Against/9: 
Hits/Run              Opp_Hits/Run
Pitches_forced/9:     Opp_Pitches/9
Pitches/Run:          Opp_Pitches/Run
Opp_Starter_Workload  Starter_Workload        
Opp_Bullpen_Workload  Bullpen_Workload:





PHILLIES LINEUP VS METS STARTER   METS LINEUP VS PHILS STARTER

    Runs_For:                      
	At_Bats/9:             
	At_Bats/Run:           
	Hits/9                 
	Hits/Run              
	Pitches_forced/gm:    
	Pitches/Run:          
	Workload 


    PHILS LINEUP vs METS BULLPEN      METS LINEUP vs PHILS BULLPEN

    Runs_For:                      
	At_Bats/9:             
	At_Bats/Run:           
	Hits/9                 
	Hits/Run              
	Pitches_forced/gm:    
	Pitches/Run:          
	Workload 

    PHILS LAST TEN GAMES              METS LAST TEN

    Record:                           
    Runs_For
    Runs_Against
    At_Bats/9:
    At_Bats_Against/9:
    At_Bats/Run:
    Opp_At_Bats/Run
    Hits/9
    Hits_Against/9
    Hits/Run
    Starter_Workload:
    Bullpen_Workload:
    Opp_Pitches/9
    Opp_Pitches/Run
    Opp_Hits/Run
    Opp_Starter_Workload
    Opp_Bullpen_Workload

    This is going to be the matchup page that holds all the stats for the teams.  And lays out all the info and will calculate who has the edge and by how much and then run simulations based off of it.

    I want this page together by the end of next week.  It is a very doable goal.

    5/26/20

    Going to have to get rankings on the teams so I can pull the ranking for the stat display.

    6/7/20

    I have a complete MLB set-up now.  Need to create a way to track my picks under different conditions.

    Conditions:

    team
    cat: side total
    line
    reason: "double negative r/d" "pitcher switcheroo r/d" "Shortened Game" "Situation Dominance" "hot bats" 
    line_movement: None With Against
    Consensus: high mid low
    result

    6/13/19

    Set the tracker up.  Tracking picks right now.  Totals are going great, sides have not been good.  Have to start thinking about the college football model, NFL model, and college basketball model.  Set them up and get ready for college footabll.

    If I can find picks that can hit at 57% that will be a 10% return.  At that point it is about how much can you put in action.  Every 1000 dollars means $100 profit.  To make it worth while have to be 3000 in action.  For 3k in action: make 30 picks/week and wager $100.  For any real money will need to be betting $300 per game.  That's 7 - 9 hundred per week cash.  To bet $300/game you would need 10 - 15k.

    Plan is to concentrate on the MLB and get the AL going, may have to suck it up and do it myself.  But get those AL stats going and then get the AL pages up.

    Come July get the NCCAF model ready.  Have that tested and working come mid july.  August get the NFL model going.  Let's see how many picks we can generate and how we do with them.

    8/5/19

    For the football - I want a page that ranks the teams in various categories and then also want a matchup page that displays the stats for the matchup.  Set up a NCAAF tab which will take people to the NCAAF page which can describe what's being tracked and what stats they can view and then offer the links - UPCOMING MATCHUPS and TEAM RANKINGS.  From upcoming matchups, you can click on a matchup and get to the stats for that matchup.  For the team rankings, want to do last three, last 6, season.  Also home and away toggles.

    I think it can all be done in two weeks, so I have some time but need to get it started.  




 












 <%= @home_last_ten_stats %>
<%= @road_last_ten_stats %>





<%= @road_last_ten_stats %>






<% @home_innings %>
<% @home_runs_scored %>
<% @home_runs_against %>
<% @home_hits_for %>
<% @home_hits_against %>
<% @home_all_starters_pitches %>
<% @home_all_bullpen_pitches %>
<% @home_pitches_total %>
<% @home_at_bats_total %>
<% @home_at_bats_per_nine %>
<% @home_errors %>
<% @home_all_opp_starter_pitches %>
<% @home_all_opp_bullpen_pitches %>
<% @home_all_opp_pitches %>

<% @road_innings %>
<% @road_runs_scored %>
<% @road_runs_against %>
<% @road_hits_for %>
<% @road_hits_against %>
<% @road_all_starters_pitches %>
<% @road_all_bullpen_pitches %>
<% @road_pitches_total %>
<% @road_at_bats_total %>
<% @road_at_bats_per_nine %>
<% @road_errors %>
<% @road_all_opp_starter_pitches %>
<% @road_all_opp_bullpen_pitches %>
<% @road_all_opp_pitches %>

<% @home_opp_starter_workload = ((@home_all_opp_starter_pitches.to_f / @home_all_opp_pitches) * 100).round(2).to_s + "%" %>

<% @home_opp_bull_pen_freq = 100.0 - @home_opp_starter_workload.to_f %>

<% @home_pitches_forced_per_9 = ((@home_all_opp_pitches.to_f / @home_innings) * 9).round(1) %>

<% @home_runs_scored_per_pitch = (@home_runs_scored.to_f / @home_all_opp_pitches.to_f).round(3) %>

<% @home_bull_pen_freq = 100 - ((@home_all_starters_pitches.to_f / @home_pitches_total) * 100).round(2) %>

<% @home_runs_against_per_pitch = (@home_runs_against.to_f / @home_pitches_total.to_f).round(3) %>

<% @home_runs_per_hit = (@home_hits_for.to_f / @home_runs_scored.to_f).round(2) %>

<% @home_opp_runs_per_hit = (@home_hits_against.to_f / @home_runs_against.to_f).round(2) %>

<div style="font-size: 20px;"><%= @home_team.matchup_abbr + " Offensive Analysis" %></div>

<div>Innings Played: <%= @home_innings %></div>
<div>Total At-Bats: <%= @home_at_bats_total %></div>
<div>At-Bats Per Nine Innings: <%= (@home_at_bats_total.to_f / @home_innings) * 9 %></div>
<div>Runs For: <%= @home_runs_scored %></div>
<div>Hits For: <%= @home_hits_for %></div>
<div>Pitches Faced Opp Starters: <%= @home_all_opp_starter_pitches %></div>
<div>Pitches Faced Opp Bullpen: <%= @home_all_opp_bullpen_pitches %></div>
<div>Total Pitches Faced: <%= @home_all_opp_pitches %>

<div>Pitches Forced Per Nine Innings: <%= @home_pitches_forced_per_9 %> </div>

<div>Opp Starter Workload Per Game: <%= @home_opp_starter_workload %></div>

<div>Opp Bullpen Workload Per Game:<%= @home_opp_bull_pen_freq %> </div>

<div>Runs Per At-Bat: <%= (@home_runs_scored.to_f / @home_at_bats_total).round(2) %></div>

<div>Runs Scored Per Pitch: <%= @home_runs_scored_per_pitch %></div>

<div>HIT:RUN Ratio: <%= @home_runs_per_hit %></div>


<div style="font-size: 20px; margin-top: 20px;"><%= @home_team.matchup_abbr + " Pitching Analysis" %></div>

<div>Pitches By Team Starters: <%= @home_all_starters_pitches %></div>
<div>Pitches By Team Bullpen: <%= @home_all_bullpen_pitches %></div>
<div>Total Pitches: <%= @home_pitches_total %></div>
<div>Starter Workload: <%= ((@home_all_starters_pitches.to_f / @home_pitches_total) * 100).round(2).to_s + "%" %></div>
<div>Bullpen Workload: <%= @home_bull_pen_freq.to_s + "%" %></div>

<div>Hits Against:<%= @home_hits_against %></div> 

<div>Runs Against: <%= @home_runs_against %></div>

<div>Opp Runs Per Pitch: <%= @home_runs_against_per_pitch %></div>

<div>OPP HIT:RUN Ratio: <%= @home_opp_runs_per_hit %></div>


<% @road_opp_starter_workload = ((@road_all_opp_starter_pitches.to_f / @road_all_opp_pitches) * 100).round(2).to_s + "%" %>

<% @road_opp_bull_pen_freq = 100.0 - @road_opp_starter_workload.to_f %>

<% @road_pitches_forced_per_9 = ((@road_all_opp_pitches.to_f / @road_innings) * 9).round(1) %>

<% @road_runs_scored_per_pitch = (@road_runs_scored.to_f / @road_all_opp_pitches.to_f).round(3) %>

<% @road_bull_pen_freq = 100 - ((@road_all_starters_pitches.to_f / @road_pitches_total) * 100).round(2) %>

<% @road_runs_against_per_pitch = (@road_runs_against.to_f / @road_pitches_total.to_f).round(3) %>

<% @road_runs_per_hit = (@road_hits_for.to_f / @road_runs_scored.to_f).round(2) %>

<% @road_opp_runs_per_hit = (@road_hits_against.to_f / @road_runs_against.to_f).round(2) %>

<div style="font-size: 20px;"><%= @road_team.matchup_abbr + " Offensive Analysis" %></div>

<div>Innings Played: <%= @road_innings %></div>
<div>Total At-Bats: <%= @road_at_bats_total %></div>
<div>At-Bats Per Nine Innings: <%= (@road_at_bats_total.to_f / @road_innings).round(2) * 9 %></div>
<div>Runs For: <%= @road_runs_scored %></div>
<div>Hits For: <%= @road_hits_for %></div>
<div>Pitches Faced By Opp Starters: <%= @road_all_opp_starter_pitches %></div>
<div>Pitches Faced By Opp Bullpen: <%= @road_all_opp_bullpen_pitches %></div>
<div>Total Pitches Faced: <%= @road_all_opp_pitches %>

<div>Pitches Forced Per Nine Innings: <%= @road_pitches_forced_per_9 %> </div>

<div>Opp Starter Workload Per Game: <%= @road_opp_starter_workload %></div>

<div>Opp Bullpen Workload Per Game:<%= @road_opp_bull_pen_freq %> </div>

<div>Runs Per At-Bat: <%= (@road_runs_scored.to_f / @road_at_bats_total).round(2) %></div>

<div>Runs Scored Per Pitch: <%= @road_runs_scored_per_pitch %></div>

<div>HIT:RUN Ratio: <%= @road_runs_per_hit %></div>


<div style="font-size: 20px; margin-top: 20px;"><%= @road_team.matchup_abbr + " Pitching Analysis" %></div>

<div>Pitches By Team Starters: <%= @road_all_starters_pitches %></div>
<div>Pitches By Team Bullpen: <%= @road_all_bullpen_pitches %></div>
<div>Total Pitches: <%= @road_pitches_total %></div>
<div>Starter Workload: <%= ((@road_all_starters_pitches.to_f / @road_pitches_total) * 100).round(2).to_s + "%" %></div>
<div>Bullpen Workload: <%= @road_bull_pen_freq.to_s + "%" %></div>

<div>Hits Against:<%= @road_hits_against %></div> 

<div>Runs Against: <%= @road_runs_against %></div>

<div>Opp Runs Per Pitch: <%= @road_runs_against_per_pitch %></div>

<div>OPP HIT:RUN Ratio: <%= @road_opp_runs_per_hit %></div>

<div class="stat_data">Games: <%= @home_all_stats[:games] %></div>
			
			<div class="stat_data">AT-BATS/9: <%= @home_all_stats[:at_bats_per_game] %></div>
			
			<div class="stat_data">AT-BATS/RUN: <%= @home_all_stats[:at_bats_per_run] %></div>

			<div class="stat_data">AT-BATS AG/9: <%= @home_all_stats[:at_bats_against_per_game] %> </div>
			
			<div class="stat_data">HITS/GM: <%= @home_all_stats[:hits_per_game] %> </div>
			
			<div class="stat_data">HITS AGAINST/GM: <%= @home_all_stats[:hits_against_per_game] %> </div>
			
			<div class="stat_data">HITS/RUN: <%= @home_all_stats[:hits_needed_per_run] %> </div>
			
			<div class="stat_data">RUNS/9: <%= @home_all_stats[:runs_per_game] %> </div>
			

			<div class="stat_data">RUNS AGAINST/9: <%= @home_all_stats[:runs_against_per_game] %> </div>
			
			<div class="stat_data">RUN DIFF: <%= @home_all_stats[:run_diff] %> </div>

			<div class="stat_data">OPP PITCHES/GM: <%= @home_all_stats[:pitches_seen_per_game] %> </div>

			
			<div class="stat_data">INNINGS BTWN RUNS: <%= @home_all_stats[:innings_per_run] %> </div>
			
			<div class="stat_data">PITCHES BTWN RUNS: <%= @home_all_stats[:runs_per_pitch_by_opp] %> </div>
	
			
			<div class="stat_data">TEAM PITCHES/GM: <%= @home_all_stats[:pitches_thrown_per_game] %> </div>
			
			<div class="stat_data">BULLPEN PITCH/RUN <%= @home_all_stats[:bullpen_rpp] %> </div>
			
			<div class="stat_data">STARTERS PITCH/RUN <%= @home_all_stats[:starter_rpp] %> </div>
			
			<div class="stat_data">OPP PITCHES/RUN: <%= @home_all_stats[:bullpen_rpp] %> </div>

		</div>

		<div class="stat_cont">

			<div class="stat_label"><%= @home_team.matchup_abbr.upcase + " HOME STATS" %></div>

			<div class="stat_data">Games: <%= @home_home_stats[:games] %></div>
			
			<div class="stat_data">AT-BATS/9: <%= @home_home_stats[:at_bats_per_game] %></div>
			
			<div class="stat_data">AT-BATS/RUN: <%= @home_home_stats[:at_bats_per_run] %></div>

			<div class="stat_data">AT-BATS AG/9: <%= @home_home_stats[:at_bats_against_per_game] %> </div>
			
			<div class="stat_data">HITS/GM: <%= @home_home_stats[:hits_per_game] %> </div>
			
			<div class="stat_data">HITS AGAINST/GM: <%= @home_home_stats[:hits_against_per_game] %> </div>
			
			<div class="stat_data">HITS/RUN: <%= @home_home_stats[:hits_needed_per_run] %> </div>
			
			<div class="stat_data">RUNS/9: <%= @home_home_stats[:runs_per_game] %> </div>
			

			<div class="stat_data">RUNS AGAINST/9: <%= @home_home_stats[:runs_against_per_game] %> </div>
			
			<div class="stat_data">RUN DIFF: <%= @home_home_stats[:run_diff] %> </div>

			<div class="stat_data">OPP PITCHES/GM: <%= @home_home_stats[:pitches_seen_per_game] %> </div>

			
			<div class="stat_data">INNINGS BTWN RUNS: <%= @home_home_stats[:innings_per_run] %> </div>
			
			<div class="stat_data">PITCHES BTWN RUNS: <%= @home_home_stats[:runs_per_pitch_by_opp] %> </div>
	
			
			<div class="stat_data">TEAM PITCHES/GM: <%= @home_home_stats[:pitches_thrown_per_game] %> </div>
			
			<div class="stat_data">BULLPEN PITCH/RUN <%= @home_home_stats[:bullpen_rpp] %> </div>
			
			<div class="stat_data">STARTERS PITCH/RUN <%= @home_home_stats[:starter_rpp] %> </div>
			
			<div class="stat_data">OPP PITCHES/RUN: <%= @home_home_stats[:bullpen_rpp] %> </div>

		</div>

		<div class="stat_cont">

			<div class="stat_label"><%= @home_team.matchup_abbr.upcase + " " + "vs" + " " + @road_team.matchup_abbr.upcase %></div>

			<div class="stat_data">Games: <%= @home_opp_stats[:games] %></div>
			
			<div class="stat_data">AT-BATS/9: <%= @home_opp_stats[:at_bats_per_game] %></div>
			
			<div class="stat_data">AT-BATS/RUN: <%= @home_opp_stats[:at_bats_per_run] %></div>
			
			<div class="stat_data">HITS/GM: <%= @home_opp_stats[:hits_per_game] %> </div>
			
			<div class="stat_data">HITS AGAINST/GM: <%= @home_opp_stats[:hits_against_per_game] %> </div>

			
			<div class="stat_data">HITS/RUN: <%= @home_opp_stats[:hits_needed_per_run] %> </div>
			
			<div class="stat_data">RUNS/9: <%= @home_opp_stats[:runs_per_game] %> </div>
			
			
			<div class="stat_data">RUN DIFF: <%= @home_opp_stats[:run_diff] %> </div>

			<div class="stat_data">OPP PITCHES/GM: <%= @home_opp_stats[:pitches_seen_per_game] %> </div>

			
			<div class="stat_data">INNINGS BTWN RUNS: <%= @home_opp_stats[:innings_per_run] %> </div>
			
			<div class="stat_data">PITCHES BTWN RUNS: <%= @home_opp_stats[:runs_per_pitch_by_opp] %> </div>
	
			
			<div class="stat_data">TEAM PITCHES/GM: <%= @home_opp_stats[:pitches_thrown_per_game] %> </div>
			
			<div class="stat_data">BULLPEN PITCH/RUN <%= @home_opp_stats[:bullpen_rpp] %> </div>
			
			<div class="stat_data">STARTERS PITCH/RUN <%= @home_opp_stats[:starter_rpp] %> </div>
			
			<div class="stat_data">OPP PITCHES/RUN: <%= @home_opp_stats[:bullpen_rpp] %> </div>

		</div>

		<div class="stat_cont">

			<div class="stat_label"><%= @home_team.matchup_abbr.upcase + " " + "vs" + " " + @matchup.away_pitcher %></div>

			<div class="stat_data">Games: <%= @home_pitcher_stats[:games] %></div>
			
			<div class="stat_data">AT-BATS/9: <%= @home_pitcher_stats[:at_bats_per_game] %></div>
			
			<div class="stat_data">AT-BATS/RUN: <%= @home_pitcher_stats[:at_bats_per_run] %></div>
			
			<div class="stat_data">HITS/GM: <%= @home_pitcher_stats[:hits_per_game] %> </div>
			
			<div class="stat_data">HITS/9: <%= @home_pitcher_stats[:hits_per_game] %> </div>
			
			<div class="stat_data">HITS/RUN: <%= @home_pitcher_stats[:hits_needed_per_run] %> </div>
			
			<div class="stat_data">RUNS/9: <%= @home_pitcher_stats[:runs_per_game] %> </div>
			
			<div class="stat_data">RUN DIFF: <%= @home_pitcher_stats[:run_diff] %> </div>

			<div class="stat_data">OPP PITCHES/GM: <%= @home_pitcher_stats[:pitches_seen_per_game] %> </div>

			
			<div class="stat_data">INNINGS BTWN RUNS: <%= @home_pitcher_stats[:innings_per_run] %> </div>
			
			<div class="stat_data">PITCHES BTWN RUNS: <%= @home_pitcher_stats[:runs_per_pitch_by_opp] %> </div>
			
			<div class="stat_data">STARTER PITCH %/GM: <%= @home_pitcher_stats[:opp_starter_freq] %> </div>
			
			<div class="stat_data">BULLPEN PITCH %/GM: <%= @home_pitcher_stats[:opp_bullpen_freq] %> </div>
			
			<div class="stat_data"><%= @road_team.matchup_abbr.upcase + " BULLPEN RUNS/PITCH:" + @home_pitcher_stats[:opp_bullpen_freq] %> </div>

		</div>

		<div class="stat_cont">

			<div class="stat_label"><%= @home_team.matchup_abbr.upcase + " " + "with" + " " + @matchup.home_pitcher %></div>

			<div class="stat_data">Games: <%= @home_with_pitcher_stats[:games] %></div>
			
			<div class="stat_data">RUNN DIFF: <%= @home_with_pitcher_stats[:run_diff] %></div>
			
			<div class="stat_data"><%= @matchup.home_pitcher.upcase + " AVG. PITCH COUNT: " %> <%= @home_with_pitcher_stats[:starter_pitch_avg] %></div>
			
			<div class="stat_data">BULLPEN PITCH COUNT: <%= @home_with_pitcher_stats[:bullpen_pitch_avg] %> </div>
			
			<div class="stat_data">AB's AGAINST: <%= @home_with_pitcher_stats[:at_bats_against_per_game] %> </div>
			
			<div class="stat_data">HITS AG/GM: <%= @home_with_pitcher_stats[:hits_against_per_game] %> </div>
			
			<div class="stat_data">RUNS AG/GM: <%= @home_with_pitcher_stats[:runs_against_per_game] %> </div>
			
			<div class="stat_data">RUNS/GM BY<%= " " + @matchup.home_pitcher.upcase %> <%= @home_with_pitcher_stats[:starter_run_avg] %> </div>

			<div class="stat_data">RUNS BY BULLPEN: <%= @home_with_pitcher_stats[:bullpen_run_avg] %> </div>

			<div class="stat_data"><%= @matchup.home_pitcher + " Pitches/Run" %> <%= @home_with_pitcher_stats[:starter_rpp] %> </div>
			
			<div class="stat_data">BULLPEN PITCHES/RUN <%= @home_with_pitcher_stats[:bullpen_rpp] %> </div>

			<div class="stat_data">OPP RUNS/PITCH <%= @home_with_pitcher_stats[:opp_runs_per_pitch] %> </div>

			<div class="stat_data">RUNS FOR: <%= @home_with_pitcher_stats[:runs_per_game] %> </div>
			
			<div class="stat_data">% OF PITCHES BY OPP STARTER: <%= @home_with_pitcher_stats[:opp_starter_freq] %> </div>
			
			<div class="stat_data">% OF PITCHES BY OPP BULLPEN: <%= @home_with_pitcher_stats[:opp_bullpen_freq] %> </div>

		</div>

		<div class="stat_cont">

			<div class="stat_label"><%= @home_team.matchup_abbr.upcase + " LAST 10 STATS" %></div>
			
			<div class="stat_data">AT-BATS/9: <%= @home_last_ten_stats[:at_bats_per_game] %></div>
			
			<div class="stat_data">AT-BATS/RUN: <%= @home_last_ten_stats[:at_bats_per_run] %></div>

			<div class="stat_data">AT-BATS AG/9: <%= @home_last_ten_stats[:at_bats_against_per_game] %> </div>
			
			<div class="stat_data">HITS/GM: <%= @home_last_ten_stats[:hits_per_game] %> </div>
			
			<div class="stat_data">HITS AGAINST/GM: <%= @home_last_ten_stats[:hits_against_per_game] %> </div>
			
			<div class="stat_data">HITS AGAINST/GM: <%= @home_last_ten_stats[:hits_against_per_game] %> </div>

			<div class="stat_data">HITS/9: <%= @home_last_ten_stats[:hits_per_nine] %> </div>
			
			<div class="stat_data">HITS/RUN: <%= @home_last_ten_stats[:hits_needed_per_run] %> </div>
			
			<div class="stat_data">RUNS/9: <%= @home_last_ten_stats[:runs_per_game] %> </div>
			

			<div class="stat_data">RUNS AGAINST/9: <%= @home_last_ten_stats[:runs_against_per_game] %> </div>
			
			<div class="stat_data">RUN DIFF: <%= @home_last_ten_stats[:run_diff] %> </div>

			<div class="stat_data">OPP PITCHES/GM: <%= @home_last_ten_stats[:pitches_seen_per_game] %> </div>

			
			<div class="stat_data">INNINGS BTWN RUNS: <%= @home_last_ten_stats[:innings_per_run] %> </div>
			
			<div class="stat_data">PITCHES BTWN RUNS: <%= @home_last_ten_stats[:runs_per_pitch_by_opp] %> </div>
	
			
			<div class="stat_data">TEAM PITCHES/GM: <%= @home_last_ten_stats[:pitches_thrown_per_game] %> </div>
			
			<div class="stat_data">BULLPEN PITCH/RUN <%= @home_last_ten_stats[:bullpen_rpp] %> </div>
			
			<div class="stat_data">STARTERS PITCH/RUN <%= @home_last_ten_stats[:starter_rpp] %> </div>
			
			<div class="stat_data">OPP PITCHES/RUN: <%= @home_last_ten_stats[:bullpen_rpp] %> </div>

		</div>
			

	</div>

	<div class="matchup_stats" style="background: blue; color: white;">

		

		
		<div class="stat_cont">

			<div class="stat_label"><%= @road_team.matchup_abbr.upcase + " INNINGS/RUN" %></div>

			<div class="stat_data"><%= "Last " + @road_team_all_games.length.to_s + " " + "Games: " + @road_all_stats[:innings_per_run].to_s %></div>

			<div class="stat_data"><%= "ON THE ROAD: " + @road_road_stats[:innings_per_run].to_s + " (" + @road_team_road_games.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "Vs. " + @home_team.matchup_abbr.upcase + ": " + @road_opp_stats[:innings_per_run].to_s + " (" + @road_vs_opp.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "GMS WITH " + @matchup.home_pitcher.upcase + ": " + @road_pitcher_stats[:innings_per_run].to_s + " (" + @road_vs_pitcher.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "LAST TEN GAMES: " + @road_last_ten_stats[:innings_per_run].to_s %></div>
		</div>
		

		

		<div class="stat_cont">

			<div class="stat_label"><%= @home_team.matchup_abbr.upcase + " HITS PER 9" %></div>

			<div class="stat_data"><%= "Last " + @home_team_all_games.length.to_s + " " + "Games: " + @home_all_stats[:hits_per_game].to_s %></div>

			<div class="stat_data"><%= "AT HOME: " + @home_home_stats[:hits_per_game].to_s + " (" + @home_team_home_games.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "Vs. " + @road_team.matchup_abbr.upcase + ": " + @home_opp_stats[:hits_per_game].to_s + " (" + @home_vs_opp.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "Vs. " + @matchup.away_pitcher.upcase + ": " + @home_pitcher_stats[:hits_per_game].to_s + " (" + @home_vs_pitcher.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "LAST TEN GAMES: " + @home_last_ten_stats[:hits_per_game].to_s %></div>
		</div>

		<div class="stat_cont">

			<div class="stat_label"><%= @home_team.matchup_abbr.upcase + " HITS AGAINST PER 9" %></div>

			<div class="stat_data"><%= "Last " + @home_team_all_games.length.to_s + " " + "Games: " + @home_all_stats[:hits_against_per_game].to_s %></div>

			<div class="stat_data"><%= "AT HOME: " + @home_home_stats[:hits_against_per_game].to_s + " (" + @home_team_home_games.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "Vs. " + @road_team.matchup_abbr.upcase + ": " + @home_opp_stats[:hits_against_per_game].to_s + " (" + @home_vs_opp.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "WITH " + @matchup.home_pitcher.upcase + ": " + @home_with_pitcher_stats[:hits_against_per_game].to_s + " (" + @home_with_pitcher.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "LAST TEN GAMES: " + @home_last_ten_stats[:hits_against_per_game].to_s %></div>
		</div>

		

		

		

		<div class="stat_cont">

			<div class="stat_label"><%= @home_team.matchup_abbr.upcase + " OPP PITCHES/RUN" %></div>

			<div class="stat_data"><%= "Last " + @home_team_all_games.length.to_s + " " + "Games: " + @home_all_stats[:opp_runs_per_pitch].to_s %></div>

			<div class="stat_data"><%= "AT HOME: " + @home_home_stats[:opp_runs_per_pitch].to_s + " (" + @home_team_home_games.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "Vs. " + @road_team.matchup_abbr.upcase + ": " + @home_opp_stats[:opp_runs_per_pitch].to_s + " (" + @home_vs_opp.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "GMS WITH " + @matchup.home_pitcher.upcase + ": " + @home_with_pitcher_stats[:opp_runs_per_pitch].to_s + " (" + @home_with_pitcher.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "LAST TEN GAMES: " + @home_last_ten_stats[:opp_runs_per_pitch].to_s %></div>
		</div>

		

		

		<div class="stat_cont">

			<div class="stat_label"><%= @home_team.matchup_abbr.upcase + " INNINGS/RUN" %></div>

			<div class="stat_data"><%= "Last " + @home_team_all_games.length.to_s + " " + "Games: " + @home_all_stats[:innings_per_run].to_s %></div>

			<div class="stat_data"><%= "AT HOME: " + @home_home_stats[:innings_per_run].to_s + " (" + @home_team_home_games.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "Vs. " + @road_team.matchup_abbr.upcase + ": " + @home_opp_stats[:innings_per_run].to_s + " (" + @home_vs_opp.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "GMS WITH " + @matchup.away_pitcher.upcase + ": " + @home_pitcher_stats[:innings_per_run].to_s + " (" + @home_vs_pitcher.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "LAST TEN GAMES: " + @home_last_ten_stats[:innings_per_run].to_s %></div>
		</div>			


	</div>


</div>



<%= @test %>
<%= @test2 %>

<div class="stat_cont">

			<div class="stat_label"><%= @road_team.matchup_abbr.upcase + " HITS PER 9" %></div>

			<div class="stat_data"><%= "Last " + @road_team_all_games.length.to_s + " " + "Games: " + @road_all_stats[:hits_per_game].to_s %></div>

			<div class="stat_data"><%= "ON THE ROAD: " + @road_road_stats[:hits_per_game].to_s + " (" + @road_team_road_games.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "Vs. " + @home_team.matchup_abbr.upcase + ": " + @road_opp_stats[:hits_per_game].to_s + " (" + @road_vs_opp.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "Vs. " + @matchup.home_pitcher.upcase + ": " + @road_pitcher_stats[:hits_per_game].to_s + " (" + @road_vs_pitcher.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "LAST TEN GAMES: " + @road_last_ten_stats[:hits_per_game].to_s %></div>
		</div>

		<div class="stat_cont">

			<div class="stat_label"><%= @road_team.matchup_abbr.upcase + " HITS AGAINST PER 9" %></div>

			<div class="stat_data"><%= "Last " + @road_team_all_games.length.to_s + " " + "Games: " + @road_all_stats[:hits_against_per_game].to_s %></div>

			<div class="stat_data"><%= "ON THE ROAD: " + @road_road_stats[:hits_against_per_game].to_s + " (" + @road_team_road_games.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "Vs. " + @home_team.matchup_abbr.upcase + ": " + @road_opp_stats[:hits_against_per_game].to_s + " (" + @home_vs_opp.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "WITH " + @matchup.away_pitcher.upcase + ": " + @road_with_pitcher_stats[:hits_against_per_game].to_s + " (" + @road_with_pitcher.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "LAST TEN GAMES: " + @road_last_ten_stats[:hits_against_per_game].to_s %></div>
		</div>

		<div class="stat_cont">

			<div class="stat_label"><%= @road_team.matchup_abbr.upcase + " PITCHES/RUN" %></div>

			<div class="stat_data"><%= "Last " + @road_team_all_games.length.to_s + " " + "Games: " + @road_all_stats[:runs_per_pitch_by_opp].to_s %></div>

			<div class="stat_data"><%= "ON THE ROAD: " + @road_road_stats[:runs_per_pitch_by_opp].to_s + " (" + @road_team_road_games.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "Vs. " + @home_team.matchup_abbr.upcase + ": " + @road_opp_stats[:runs_per_pitch_by_opp].to_s + " (" + @road_vs_opp.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "GMS WITH " + @matchup.home_pitcher.upcase + ": " + @road_pitcher_stats[:runs_per_pitch_by_opp].to_s + " (" + @road_vs_pitcher.length.to_s + " " + "gm/s)" %></div>

			<div class="stat_data"><%= "LAST TEN GAMES: " + @road_last_ten_stats[:runs_per_pitch_by_opp].to_s %></div>
		</div>






